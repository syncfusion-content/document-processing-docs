@Html.EJS().Spreadsheet("spreadsheet").ShowSheetTabs(false).Created("created").ShowRibbon(false).Sheets(sheet =>
{
    sheet.Ranges(ranges =>
    {
        ranges.DataSource((IEnumerable<object>)ViewBag.DefaultData).StartCell("A2").Add();
    }).Rows(row =>
    {
        row.Height(40).CustomHeight(true).Cells(cell =>
        {
            cell.ColSpan(5).Value("Monthly Expense").Style(new SpreadsheetCellStyle() { FontWeight = FontWeight.Bold, VerticalAlign = VerticalAlign.Middle, TextAlign=TextAlign.Center, FontSize="15pt", FontStyle= FontStyle.Italic }).Add();
        }).Add();
        row.Height(30).Add();
        row.Index(11).Cells(cell =>
        {
            cell.Value("Totals").Style(new SpreadsheetCellStyle() { FontWeight = FontWeight.Bold, FontStyle= FontStyle.Italic }).Add();
            cell.Formula("=SUM(B3:B11)").Add();
            cell.Formula("=SUM(C3:C11)").Add();
            cell.Formula("=SUM(D3:D11)").Add();
        }).Add();
         row.Cells(cell =>
        {
            cell.Index(1).Value("Number of Categories").ColSpan(2).Style(new SpreadsheetCellStyle() { FontWeight = FontWeight.Bold, TextAlign= TextAlign.Right }).Add();
            cell.Formula("=COUNTA(A3:A11)").Index(3).Add();
        }).Add();
        row.Cells(cell =>
        {
            cell.Index(1).Value("Average Spend").ColSpan(2).Style(new SpreadsheetCellStyle() { FontWeight = FontWeight.Bold, TextAlign= TextAlign.Right }).Add();
            cell.Formula("=AVERAGE(B3:B11)").Index(3).Format("$#,##0").Add();
        }).Add();
        row.Cells(cell =>
        {
            cell.Index(1).Value("Min Spend").ColSpan(2).Style(new SpreadsheetCellStyle() { FontWeight = FontWeight.Bold, TextAlign= TextAlign.Right }).Add();
            cell.Formula("=MIN(B3:B11)").Index(3).Format("$#,##0").Add();
        }).Add();
        row.Cells(cell =>
        {
            cell.Index(1).Value("Max Spend").ColSpan(2).Style(new SpreadsheetCellStyle() { FontWeight = FontWeight.Bold, TextAlign= TextAlign.Right }).Add();
            cell.Formula("=MAX(B3:B11)").Index(3).Format("$#,##0").Add();
        }).Add();
    }).Columns(column =>
    {
        column.Width(150).Add();
        column.Width(120).Add();
        column.Width(120).Add();
        column.Width(120).Add();
        column.Width(140).Add();
        column.Width(150).Add();
    }).Add();
}).Render()

<script>

    function created() {
        this.cellFormat({ fontWeight: 'bold', textAlign: 'center' }, 'A2:E2');
        this.numberFormat('$#,##0', 'B3:D12');
        this.numberFormat('0%', 'E3:E12');

        // Adding custom function for calculating the percentage between two cells.
        this.addCustomFunction(calculatePercentage, 'PERCENTAGE');
        // Calculate percentage using custom added formula in E11 cell.
        this.updateCell({ formula: '=PERCENTAGE(C11,D11)' }, 'E11');
        // Calculate expressions using computeExpression in E10 cell.
        this.updateCell({ value: this.computeExpression('C10/D10') },'E10');
        // Calculate custom formula values using computeExpression in E12 cell.
        this.updateCell({ value: this.computeExpression('=PERCENTAGE(C12,D12)'), }, 'E12');
        // Calculate SUM (built-in) formula values using computeExpression in D12 cell.
        this.updateCell({ value: this.computeExpression('=SUM(D3:D11)') }, 'D12');
    }

    // Custom function to calculate percentage between two cell values.
    function calculatePercentage(firstCell,secondCell) {
       return (firstCell) / (secondCell);
    }
</script>