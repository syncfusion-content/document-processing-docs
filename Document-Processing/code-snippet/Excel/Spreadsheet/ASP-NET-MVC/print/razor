@Html.EJS().DropDownButton("element").Content("Print").Items((IEnumerable<object>)ViewBag.items).Select("itemSelect").Render()

@Html.EJS().Spreadsheet("spreadsheet").DataBound("dataBound").Created("created")Sheets(sheet =>
{
    sheet.Name("Budget").IsProtected(true).Ranges(ranges =>
    {
        ranges.DataSource((IEnumerable<object>)ViewBag.budgetData).StartCell("A1").Add();
    }).Columns(column =>
    {
        column.Width(100).Add();
        column.Width(100).Add();
        column.Width(100).Add();
        column.Width(100).Add();
    }).Add();
    sheet.Name("Salary").Ranges(ranges =>
    {
        ranges.DataSource((IEnumerable<object>)ViewBag.salaryData).StartCell("A1").Add();
    }).Columns(column =>
    {
        column.Width(100).Add();
        column.Width(100).Add();
        column.Width(100).Add();
        column.Width(100).Add();
    }).Add();
}).Render()

<script>
    var printElement = createElement("div", {
    className: "e-sheet-panel",
    innerHTML:
        '<div class="e-spreadsheet-print"></div><div class="e-sheet"><div class="e-main-panel style="height:100%" style="overflow: unset"><div class="e-sheet-content" ></div></div></div>'
    }); // creating same hierarchy of element as DOM
    var isPrint = false;

    function dataBound() {
        if (isPrint) {
      printElement.querySelector(".e-sheet-content").innerHTML += document
        .querySelector(".e-sheet-content").outerHTML;
      var usedRange = this.getActiveSheet().usedRange;
      var tbody = printElement.querySelector('.e-sheet-content').children[this.activeSheetIndex].querySelector('tbody');
      for (var i = tbody.getElementsByClassName('e-row').length; i >= 0; i--) {
        if (tbody.getElementsByClassName('e-row')[i] && parseInt(tbody.getElementsByClassName('e-row')[i].getAttribute('aria-rowindex')) > usedRange.rowIndex + 1) {
          tbody.getElementsByClassName('e-row')[i].remove();
        }
      }
      var sheets = this.sheets;
      if (sheets.length - 1 === this.activeSheetIndex) {
        var count = printElement.querySelector(".e-sheet-content").childElementCount;
        if (count > 1) {
          for (var i = 0; i < count; i++) {
            (printElement.querySelector('.e-sheet-content').children[i].getElementsByClassName('e-virtualtrack')[0] as HTMLElement).style.height = 'auto';
            printElement.querySelector('.e-sheet-content').children[i].setAttribute('style', 'page-break-after: always;')
          }
        }
        print(printElement);
        isPrint = false;
        printElement.querySelector(".e-sheet-content").innerHTML = '';
      } else {
        if (sheets[this.activeSheetIndex + 1]) {
          this.goTo(sheets[this.activeSheetIndex + 1].name + "!A1");
        }
      }
    }
    }
    function itemSelect(args) {
        if (args.item.text === 'Print') {
            printElement.querySelector(".e-sheet-content").innerHTML = document.querySelector(
                ".e-sheet-content"
            ).outerHTML; //  To add the spreadsheet table
            debugger
            var usedRange = this.getActiveSheet().usedRange;
            var tbody = printElement.querySelector('tbody');
            for (var i = tbody.getElementsByClassName('e-row').length; i >= 0; i--) {
                if (tbody.getElementsByClassName('e-row')[i] && parseInt(tbody.getElementsByClassName('e-row')[i].getAttribute('aria-rowindex')) > usedRange.rowIndex + 1) {
                tbody.getElementsByClassName('e-row')[i].remove();
                }
            }
            (printElement.querySelector('.e-sheet-content').children[0].getElementsByClassName('e-virtualtrack')[0] as HTMLElement).style.height = 'auto';
            print(printElement);
            printElement.querySelector(".e-sheet-content").innerHTML = '';
            }
            if (args.item.text === 'Print All') {
            var sheets = this.sheets;
            if (this.activeSheetIndex === 0) {
                printElement.querySelector(".e-sheet-content").innerHTML = document.querySelector(
                ".e-sheet-content"
                ).outerHTML; //  To add the spreadsheet table

                var usedRange = this.getActiveSheet().usedRange;
                var tbody = printElement.querySelector('tbody');
                for (var i = tbody.getElementsByClassName('e-row').length; i >= 0; i--) {
                if (tbody.getElementsByClassName('e-row')[i] && parseInt(tbody.getElementsByClassName('e-row')[i].getAttribute('aria-rowindex')) > usedRange.rowIndex + 1) {
                    tbody.getElementsByClassName('e-row')[i].remove();
                }
                }

                if (sheets[this.activeSheetIndex + 1]) {
                this.goTo(sheets[this.activeSheetIndex + 1].name + "!A1");
                isPrint = true;
                } else {
                print(printElement);
                printElement.querySelector(".e-sheet-content").innerHTML = '';
                }
            } else {
                if (sheets[0]) {
                this.goTo(sheets[0].name + "!A1");
                isPrint = true;
                }
            }
        }
    }
    function created() {
        this.cellFormat({ fontWeight: 'bold', fontSize: '12pt'}, 'A1:E1');
        this.cellFormat({ color: '#10c469' }, 'B1:B10');
    }

</script>
